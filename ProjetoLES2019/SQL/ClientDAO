import java.sql.SQLException;
import java.util.List;

import br.edu.les2019.domain.Client;
import br.edu.les2019.domain.EntityDomain;

public class ClientDAO extends AbstractDAO
{	Client client;
	String table;
	public ClientDAO() {super();}

	@Override public void save(EntityDomain ed) 
	{	this.client = (Client)ed;
		//define o nome da tabela
		this.table = this.client.getClass().getSimpleName().toLowerCase();
		try //código SQL para inserção de dados
		{	this.ps = this.connection.prepareStatement("INSERT INTO " + 
				this.table + "(name, surname, cpf, genero, password, picture)",
				this.ps.RETURN_GENERATED_KEYS);
			
			//prepara os dados a serem armazenados no BD
			this.ps.setString(1, this.client.getName());
			this.ps.setString(2, this.client.getSurname());
			this.ps.setString(3, this.client.getCpf());
			this.ps.setString(4, this.client.getGenero());
			this.ps.setString(5, this.client.getPassword());
			this.ps.setString(6, this.client.getPhoto());
			
			//para gerar a chave primária
			this.rs = this.ps.getGeneratedKeys();
			if(this.rs.next())	{this.client.setId(this.rs.getInt(1));}
			
			//salva os e-mails
			EmailDAO edao = new EmailDAO();
			edao.save(client);
			
			//save all client's phones number
			PhoneDAO pdao = new PhoneDAO();
			//define the client of the phone as the same
			client.getPhone().setClient(client);
			pdao.save(client.getPhone());
			
			//confirma a query
			this.connection.commit();
		}
		catch(SQLException e)
		{	System.err.println(e.getMessage());
			try {this.connection.rollback();}
			catch(SQLException e1) {e1.printStackTrace();}
			e.printStackTrace();
		}
		finally
		{	try
			{	ps.close();
				this.connection.close();
			}
			catch(SQLException e2){e2.printStackTrace();}
		}
	}

	@Override public void update(EntityDomain ed) 
	{	
		
	}

	@Override public List<EntityDomain> search(EntityDomain ed) 
	{	return null;
	}	
}
